#!/usr/bin/env python3

#
#    This file is part of rpi_exporter.
#
#    rpi_exporter is a tool to synchronise files between many hosts using rsync.
#    It uses a divide and conqueor method to efficiently copy files
#    between hosts on a network.
#
#    Copyright (C) 2017 Neil Munday (neil@mundayweb.com)
#
#    rpi_exporter is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    rpi_exporter is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with rpi_exporter.  If not, see <http://www.gnu.org/licenses/>.
#

"""
:author: Neil Munday

A simple Prometheus exporter for the CPU and GPU temperatures of a Raspberry Pi.

Usage:

rpi_exporter [ -p PORT ]
"""

from prometheus_client import start_http_server, Summary
from prometheus_client.core import GaugeMetricFamily, REGISTRY

import argparse
import os
import re
import shlex
import subprocess
import time

def runCommand(cmd):
	'''
	Execute the given command and return a tuple that contains the
	return code, std out and std err output.
	'''
	process = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	stdout, stderr = process.communicate()
	return (process.returncode, stdout.decode(), stderr.decode())

class RpiCollector(object):
	'''
	A simple Collector for the Raspberry Pi.
	'''

	__cpuTempFile = '/sys/devices/virtual/thermal/thermal_zone0/hwmon0/temp1_input'
	__gpuTempRe = re.compile('temp=([0-9]+\.[0-9]+)')

	def __init__(self):
	        pass

	def collect(self):
		# get core temperature
		cpuTemp = 0
		if os.path.exists(RpiCollector.__cpuTempFile):
			with open(RpiCollector.__cpuTempFile, 'r') as f:
				cpuTemp = float(f.read()) / 1000.0
		# get GPU temp
		gpuTemp = 0
		rtn, stdout, stderr = runCommand('/opt/vc/bin/vcgencmd measure_temp')
		if rtn == 0:
			match = RpiCollector.__gpuTempRe.match(stdout)
			if match:
				gpuTemp = float(match.group(1))

		gauge = GaugeMetricFamily('rpi_temperatures', 'Raspberry Pi temperatures', labels=['temperature'])
		gauge.add_metric(['cpu'], cpuTemp)
		gauge.add_metric(['gpu'], gpuTemp)
		yield gauge

if __name__ == '__main__':

	parser = argparse.ArgumentParser(description='Provides Prometheus CPU and GPU metrics for the Raspberry Pi', add_help=True)
	parser.add_argument('-p', '--port', help='Specify the port to listen on', dest='port', type=int, default=9111)
	args = parser.parse_args()

	start_http_server(args.port)
	REGISTRY.register(RpiCollector())
	while True:
		time.sleep(1)
